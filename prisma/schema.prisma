// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?     @unique
  slug            String      @unique
  description     String?
  createdAt       DateTime    @default(now())
  password        String?
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  followingNumber Int         @default(0)
  followersNumber Int         @default(0)
  communitiesIDs  String[]    @db.ObjectId
  communities     Community[] @relation(fields: [communitiesIDs], references: [id])

  // Implement MANY-TO-MANy relations between follower
  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verefication_tokens")
}

model Community {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  thumb       String
  isPublic    String
  price       Int      @default(0)
  filters     String[]
  userId      String?  @db.ObjectId
  memberCount Int      @default(0)
  memberIDs   String[] @db.ObjectId
  members     User[]   @relation(fields: [memberIDs], references: [id])
}
