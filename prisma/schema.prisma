// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                 String                @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?               @unique
  slug               String                @unique
  description        String?
  createdAt          DateTime              @default(now())
  password           String?
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  followingNumber    Int                   @default(0)
  followersNumber    Int                   @default(0)
  createdCommunities Community[]           @relation("CommunityCreator")
  communities        CommunityMembership[]
  postsWritten       Post[]                @relation("PostsWritten")
  postsLiked         Post[]                @relation("Likes", fields: [postLikedIds], references: [id])
  postLikedIds       String[]              @db.ObjectId

  // Implement MANY-TO-MANy relations between follower
  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verefication_tokens")
}

model Community {
  id               String                @id @default(auto()) @map("_id") @db.ObjectId
  name             String                @unique
  thumb            String
  icon             String
  accessLevel      CommunityAccessLevel
  description      String
  aboutImages      String[]
  aboutDescription String?
  creator          User                  @relation("CommunityCreator", fields: [creatorId], references: [id])
  creatorId        String                @db.ObjectId
  price            Int                   @default(0)
  slug             String                @unique
  filters          String[]
  userId           String?               @db.ObjectId
  members          CommunityMembership[]
  posts            Post[]

  @@map("communities")
}

model CommunityMembership {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  community   Community         @relation(fields: [communityId], references: [id])
  communityId String            @db.ObjectId
  user        User              @relation(fields: [userId], references: [id])
  userId      String            @db.ObjectId
  role        CommunityUserRole @default(MEMBER)
  level       Int               @default(1)
  points      Int               @default(0)

  @@index([userId, communityId])
  @@map("community_memberships")
}

enum CommunityAccessLevel {
  PRIVATE
  PUBLIC
}

enum CommunityUserRole {
  MEMBER
  ADMIN
}

model Post {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  title          String?
  content        String
  creator        User      @relation("PostsWritten", fields: [creatorId], references: [id])
  creatorId      String    @db.ObjectId
  community      Community @relation(fields: [communityId], references: [id])
  communityId    String    @db.ObjectId
  userLikes      User[]    @relation("Likes", fields: [userLikesIds], references: [id])
  userLikesIds   String[]  @db.ObjectId
  answeredPost   Post?     @relation("PostComments", fields: [answeredPostId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  answeredPostId String?   @db.ObjectId
  comments       Post[]    @relation("PostComments")
  createdAt      DateTime  @default(now())

  @@map("posts")
}
